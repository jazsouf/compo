---
// compo/src/components/SelectExpansion.astro
---

<style>
  select-expansion {
    display: grid;
    place-items: center;
    position: relative;
    width: 100%;
    min-height: 50vh;
    margin: auto;
  }

  form {
    width: 100%;
  }

  .select-wrapper {
    position: relative;
    display: grid;
    place-items: center;
    width: 100%;
  }

  .select-button {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .select-button:hover {
    border-color: #999;
  }

  .select-button:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
  }

  .select-button.expanded {
    visibility: hidden;
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    z-index: 1001;
  }

  .options-list {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    width: 100%;
    background: white;
    border: 1px solid #ccc;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
    transform: translateY(-50%) scaleY(0);
    transform-origin: center;
    transition:
      transform 0.3s ease-out,
      opacity 0.3s ease-out;
    opacity: 0;
  }

  .options-list.open {
    transform: translateY(-50%) scaleY(1);
    opacity: 1;
  }

  .option {
    padding: 8px 12px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
    margin: 0;
  }

  .option:last-child {
    border-bottom: none;
  }

  .option:hover {
    background-color: #f5f5f5;
  }

  .option.selected {
    background-color: #007bff;
    color: white;
  }

  .option-label {
    font-weight: 500;
  }
</style>

<select-expansion>
  <form>
    <div class="select-wrapper">
      <button
        type="button"
        class="select-button"
        aria-expanded="false"
        aria-haspopup="listbox"
        role="combobox"
      >
        <span class="selected-content">Select a name</span>
      </button>

      <div class="options-list" role="listbox">
        <div class="option" data-value="dakota" role="option">
          <div class="option-label">Dakota</div>
        </div>
        <div class="option" data-value="ana" role="option">
          <div class="option-label">Ana</div>
        </div>
        <div class="option" data-value="renate" role="option">
          <div class="option-label">Renate</div>
        </div>
        <div class="option" data-value="anne" role="option">
          <div class="option-label">Anne</div>
        </div>
      </div>

      <input type="hidden" name="name-select" id="name-select" value="" />
    </div>
  </form>
</select-expansion>

<script>
  import { registerElement } from "../utils";

  class SelectExpansion extends HTMLElement {
    private selectedValue: string = "";
    private isOpen: boolean = false;

    constructor() {
      super();
      this.selectedValue = "";
      this.isOpen = false;
    }

    connectedCallback() {
      this.initializeSelect();
    }

    disconnectedCallback() {
      this.cleanup();
    }

    private initializeSelect() {
      const button = this.querySelector(".select-button")!;
      const optionsList = this.querySelector(".options-list")!;
      const options = this.querySelectorAll(".option")!;

      // Add event listeners
      button.addEventListener("click", (e) => this.toggleDropdown(e));

      options.forEach((option) => {
        option.addEventListener("click", (e) => this.selectOption(e));
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => this.handleOutsideClick(e));

      // Handle keyboard navigation
      button.addEventListener("keydown", (e) => this.handleKeydown(e));
    }

    private toggleDropdown(event: MouseEvent) {
      event.preventDefault();
      event.stopPropagation();

      const button = this.querySelector(".select-button")!;
      const optionsList = this.querySelector(".options-list")!;

      this.isOpen = !this.isOpen;

      if (this.isOpen) {
        optionsList.classList.add("open");
        button.classList.add("expanded");
        button.setAttribute("aria-expanded", "true");
      } else {
        optionsList.classList.remove("open");
        button.classList.remove("expanded");
        button.setAttribute("aria-expanded", "false");
      }
    }

    private selectOption(event: MouseEvent) {
      const option = event.currentTarget as HTMLElement;
      const value = option.dataset.value!;
      const label = option.querySelector(".option-label")!.textContent;

      this.selectedValue = value;
      this.updateSelectedContent(label);
      this.updateHiddenInput(value);
      this.closeDropdown();

      // Update selected state
      this.querySelectorAll(".option").forEach((opt) => opt.classList.remove("selected"));
      option.classList.add("selected");
    }

    private updateSelectedContent(text: string) {
      const selectedContent = this.querySelector(".selected-content");
      if (selectedContent) {
        selectedContent.textContent = text;
      }
    }

    private updateHiddenInput(value: string) {
      const hiddenInput = this.querySelector('input[type="hidden"]') as HTMLInputElement;
      hiddenInput.value = value;
    }

    private closeDropdown() {
      const button = this.querySelector(".select-button")!;
      const optionsList = this.querySelector(".options-list")!;

      this.isOpen = false;
      optionsList.classList.remove("open");
      button.classList.remove("expanded");
      button.setAttribute("aria-expanded", "false");
    }

    private handleOutsideClick(event: Event) {
      if (!this.contains(event.target as Node) && this.isOpen) {
        this.closeDropdown();
      }
    }

    private handleKeydown(event: KeyboardEvent) {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        this.toggleDropdown(event);
      } else if (event.key === "Escape" && this.isOpen) {
        this.closeDropdown();
      }
    }

    private cleanup() {
      const button = this.querySelector(".select-button")!;
      const options = this.querySelectorAll(".option")!;

      button.removeEventListener("click", this.toggleDropdown);
      button.removeEventListener("keydown", this.handleKeydown);

      options.forEach((option) => {
        option.removeEventListener("click", this.selectOption);
      });

      document.removeEventListener("click", this.handleOutsideClick);
    }
  }

  registerElement("select-expansion", SelectExpansion);
</script>
